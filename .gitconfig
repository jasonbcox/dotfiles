[include]
  path = ./.gituser

[core]
  editor = vim

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto

[push]
  default = simple

[log]
  follow = true

[diff]
  renames = copies

[alias]
  s = status

  # Graph-print current branch
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  # Graph-print all branches, including remotes
  lg-all = "!f(){ git lg --decorate --all \"$@\" ;};f"

  # Graph-print all local branches
  lg-b = "!f(){ git lg --decorate --branches \"$@\" ;};f"

  lg-ignore = "!f(){ \
    if [ -f ~/.gitignore-patterns ]; then \
      git lg -n 100 $@ | grep -vf ~/.gitignore-patterns; \
    else \
      git lg -n 100 $@; \
    fi \
  };f"

  # Fetch a Github PR. After fetching, the commit can be checked out like normal
  pr = "!f(){ \
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then \
      echo \"Expected arguments: <remote> <Github-PR-#>\"; \
      exit 1; \
    fi; \
    remote=\"origin\"; \
    if [ $# -eq 2 ]; then \
      remote=$1; \
      prnum=$2; \
    else \
      prnum=$1; \
    fi; \
    remote_exists=$(git remote | grep \"^$remote\\$\" | wc -l); \
    if [ $remote_exists -eq 0 ]; then \
      echo \"The remote you specified does not exist!\"; \
      exit 2; \
    fi; \
    git fetch \"$remote\" \"pull/$prnum/head\"; \
  };f"

  deleted-files = "!f(){ git lg --diff-filter=D --summary \"$@\" ;};f"
  tracked-files = ls-tree -r master --name-only
  committers = "!f(){ git shortlog -sne \"$@\" | grep -vf ~/.gitignore-users ;};f"

  pl = pull --rebase
  plom = pull --rebase origin master:master # Pull latest master and then rebase current branch onto master
  bl = branch -al # List all branches (remotes included)
  ch = checkout
  dl = log -- # Show log of a deleted file

  sl = stash list
  ss  = "!sh -c 'git stash show -p stash@{$1}' -" # Show the diff for the given stash number
